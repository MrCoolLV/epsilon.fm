# AI Context for Code Understanding and Generation

## Project Overview
This project appears to be a music-related web application with both frontend and backend components. It uses a combination of technologies including FastAPI for the backend, SvelteKit for the frontend, and various APIs for music data.

## Key Technologies
- Backend: FastAPI, SQLAlchemy, PostgreSQL
- Frontend: SvelteKit, TypeScript
- APIs: Soundcharts API, custom Music API
- Other: Redis for caching, Tauri for desktop app capabilities

## Important Concepts
1. Music Industry Data: The application deals with artists, albums, tracks, playlists, and genres.
2. Authentication: JWT-based authentication is implemented.
3. API Integration: Multiple external APIs are used to fetch music-related data.
4. Database Models: SQLAlchemy models for various entities like User, Album, Artist, Track, etc.
5. Caching: Redis is used for caching to improve performance.
6. Rate Limiting: Implemented to prevent API abuse.
7. Pagination: Used in API responses for large datasets.

## Code Structure
- Backend: Organized into apps (admin, auth, ms) with models, schemas, and API routes.
- Frontend: Component-based architecture using SvelteKit.
- Shared: Types and interfaces shared between frontend and backend.

## Best Practices
1. Follow RESTful API design principles.
2. Use async/await for asynchronous operations.
3. Implement proper error handling and validation.
4. Follow TypeScript best practices for type safety.
5. Use dependency injection where appropriate.
6. Implement proper security measures (authentication, authorization, input validation).

## Potential Areas for AI Assistance
1. Generating CRUD operations for new entities.
2. Creating and optimizing database queries.
3. Implementing new API endpoints and their corresponding frontend components.
4. Refactoring code for better performance or readability.
5. Generating test cases for both frontend and backend.
6. Assisting with API integration and data transformation.
7. Implementing caching strategies for improved performance.
8. Enhancing security features and best practices.

When working on this project, always consider the existing architecture and coding style to maintain consistency.
