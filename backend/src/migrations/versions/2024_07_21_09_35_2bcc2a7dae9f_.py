"""empty message

Revision ID: 2bcc2a7dae9f
Revises: 74c3710951d4
Create Date: 2024-07-21 09:35:05.764168

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = "2bcc2a7dae9f"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "system_tier",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column(
            "default", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        comment="Tier information",
    )
    op.create_index(op.f("ix_system_tier_id"), "system_tier", ["id"], unique=False)
    op.create_table(
        "system_token_blacklist",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        comment="Token blacklist for authentication",
    )
    op.create_index(
        op.f("ix_system_token_blacklist_id"),
        "system_token_blacklist",
        ["id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_system_token_blacklist_token"),
        "system_token_blacklist",
        ["token"],
        unique=False,
    )
    op.create_table(
        "admin_user",
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("tier_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column(
            "hashed_password", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "is_active", sa.Boolean(), server_default=sa.text("true"), nullable=False
        ),
        sa.Column(
            "is_superuser",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "profile_image_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["tier_id"],
            ["system_tier.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="User account information",
    )
    op.create_index(op.f("ix_admin_user_email"), "admin_user", ["email"], unique=True)
    op.create_index(op.f("ix_admin_user_id"), "admin_user", ["id"], unique=False)
    op.create_index(
        op.f("ix_admin_user_is_deleted"), "admin_user", ["is_deleted"], unique=False
    )
    op.create_index(
        op.f("ix_admin_user_tier_id"), "admin_user", ["tier_id"], unique=False
    )
    op.create_index(
        op.f("ix_admin_user_username"), "admin_user", ["username"], unique=True
    )
    op.create_table(
        "system_rate_limit",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("tier_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("path", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("limit", sa.Integer(), nullable=False),
        sa.Column("period", sa.Integer(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["tier_id"],
            ["system_tier.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        comment="Rate limit configuration",
    )
    op.create_index(
        op.f("ix_system_rate_limit_id"), "system_rate_limit", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_system_rate_limit_tier_id"),
        "system_rate_limit",
        ["tier_id"],
        unique=False,
    )
    op.create_table(
        "blog_post",
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("media_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("text", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["admin_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Blog post information",
    )
    op.create_index(op.f("ix_blog_post_id"), "blog_post", ["id"], unique=False)
    op.create_index(
        op.f("ix_blog_post_is_deleted"), "blog_post", ["is_deleted"], unique=False
    )
    op.create_index(
        op.f("ix_blog_post_user_id"), "blog_post", ["user_id"], unique=False
    )
    op.create_table(
        "ms_artist",
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("org_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("biography", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "spotify_artist_link", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "youtube_channel_link", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "instagram_profile_link", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "facebook_profile_link", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("x_profile_link", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "tiktok_profile_link", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "soundcloud_profile_link",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.Column(
            "songkick_profile_link", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "bandsintown_profile_link",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["admin_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("org_id"),
        comment="Management System artist information",
    )
    op.create_index(op.f("ix_ms_artist_id"), "ms_artist", ["id"], unique=False)
    op.create_index(
        op.f("ix_ms_artist_is_deleted"), "ms_artist", ["is_deleted"], unique=False
    )
    op.create_index(
        op.f("ix_ms_artist_user_id"), "ms_artist", ["user_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_ms_artist_user_id"), table_name="ms_artist")
    op.drop_index(op.f("ix_ms_artist_is_deleted"), table_name="ms_artist")
    op.drop_index(op.f("ix_ms_artist_id"), table_name="ms_artist")
    op.drop_table("ms_artist")
    op.drop_index(op.f("ix_blog_post_user_id"), table_name="blog_post")
    op.drop_index(op.f("ix_blog_post_is_deleted"), table_name="blog_post")
    op.drop_index(op.f("ix_blog_post_id"), table_name="blog_post")
    op.drop_table("blog_post")
    op.drop_index(op.f("ix_system_rate_limit_tier_id"), table_name="system_rate_limit")
    op.drop_index(op.f("ix_system_rate_limit_id"), table_name="system_rate_limit")
    op.drop_table("system_rate_limit")
    op.drop_index(op.f("ix_admin_user_username"), table_name="admin_user")
    op.drop_index(op.f("ix_admin_user_tier_id"), table_name="admin_user")
    op.drop_index(op.f("ix_admin_user_is_deleted"), table_name="admin_user")
    op.drop_index(op.f("ix_admin_user_id"), table_name="admin_user")
    op.drop_index(op.f("ix_admin_user_email"), table_name="admin_user")
    op.drop_table("admin_user")
    op.drop_index(
        op.f("ix_system_token_blacklist_token"), table_name="system_token_blacklist"
    )
    op.drop_index(
        op.f("ix_system_token_blacklist_id"), table_name="system_token_blacklist"
    )
    op.drop_table("system_token_blacklist")
    op.drop_index(op.f("ix_system_tier_id"), table_name="system_tier")
    op.drop_table("system_tier")
    # ### end Alembic commands ###
