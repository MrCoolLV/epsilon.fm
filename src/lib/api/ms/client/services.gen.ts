// This file is auto-generated by @hey-api/openapi-ts

import {
	createClient,
	createConfig,
	type Options,
	urlSearchParamsBodySerializer
} from '@hey-api/client-fetch';
import type {
	LoginForAccessTokenV1SystemAuthLoginPostData,
	LoginForAccessTokenV1SystemAuthLoginPostError,
	LoginForAccessTokenV1SystemAuthLoginPostResponse,
	RefreshAccessTokenV1SystemAuthRefreshPostError,
	RefreshAccessTokenV1SystemAuthRefreshPostResponse,
	LogoutV1SystemAuthLogoutPostError,
	LogoutV1SystemAuthLogoutPostResponse,
	EndpointV1ArtistsCreatePostData,
	EndpointV1ArtistsCreatePostError,
	EndpointV1ArtistsCreatePostResponse,
	EndpointV1ArtistsGetIdGetData,
	EndpointV1ArtistsGetIdGetError,
	EndpointV1ArtistsGetIdGetResponse,
	EndpointV1ArtistsGetPaginatedGetData,
	EndpointV1ArtistsGetPaginatedGetError,
	EndpointV1ArtistsGetPaginatedGetResponse,
	EndpointV1ArtistsUpdateIdPatchData,
	EndpointV1ArtistsUpdateIdPatchError,
	EndpointV1ArtistsUpdateIdPatchResponse,
	EndpointV1ArtistsDeleteIdDeleteData,
	EndpointV1ArtistsDeleteIdDeleteError,
	EndpointV1ArtistsDeleteIdDeleteResponse,
	EndpointV1TracksCreatePostData,
	EndpointV1TracksCreatePostError,
	EndpointV1TracksCreatePostResponse,
	EndpointV1TracksGetIdGetData,
	EndpointV1TracksGetIdGetError,
	EndpointV1TracksGetIdGetResponse,
	EndpointV1TracksGetPaginatedGetData,
	EndpointV1TracksGetPaginatedGetError,
	EndpointV1TracksGetPaginatedGetResponse,
	EndpointV1TracksUpdateIdPatchData,
	EndpointV1TracksUpdateIdPatchError,
	EndpointV1TracksUpdateIdPatchResponse,
	EndpointV1TracksDeleteIdDeleteData,
	EndpointV1TracksDeleteIdDeleteError,
	EndpointV1TracksDeleteIdDeleteResponse,
	EndpointV1GenresCreatePostData,
	EndpointV1GenresCreatePostError,
	EndpointV1GenresCreatePostResponse,
	EndpointV1GenresGetIdGetData,
	EndpointV1GenresGetIdGetError,
	EndpointV1GenresGetIdGetResponse,
	EndpointV1GenresGetPaginatedGetData,
	EndpointV1GenresGetPaginatedGetError,
	EndpointV1GenresGetPaginatedGetResponse,
	EndpointV1GenresUpdateIdPatchData,
	EndpointV1GenresUpdateIdPatchError,
	EndpointV1GenresUpdateIdPatchResponse,
	EndpointV1GenresDeleteIdDeleteData,
	EndpointV1GenresDeleteIdDeleteError,
	EndpointV1GenresDeleteIdDeleteResponse,
	EndpointV1SubgenresCreatePostData,
	EndpointV1SubgenresCreatePostError,
	EndpointV1SubgenresCreatePostResponse,
	EndpointV1SubgenresGetIdGetData,
	EndpointV1SubgenresGetIdGetError,
	EndpointV1SubgenresGetIdGetResponse,
	EndpointV1SubgenresGetPaginatedGetData,
	EndpointV1SubgenresGetPaginatedGetError,
	EndpointV1SubgenresGetPaginatedGetResponse,
	EndpointV1SubgenresUpdateIdPatchData,
	EndpointV1SubgenresUpdateIdPatchError,
	EndpointV1SubgenresUpdateIdPatchResponse,
	EndpointV1SubgenresDeleteIdDeleteData,
	EndpointV1SubgenresDeleteIdDeleteError,
	EndpointV1SubgenresDeleteIdDeleteResponse
} from './types.gen';

export const client = createClient(createConfig());

export class AuthenticationService {
	/**
	 * Login For Access Token
	 */
	public static loginForAccessTokenV1SystemAuthLoginPost<ThrowOnError extends boolean = false>(
		options: Options<LoginForAccessTokenV1SystemAuthLoginPostData, ThrowOnError>
	) {
		return (options?.client ?? client).post<
			ThrowOnError,
			LoginForAccessTokenV1SystemAuthLoginPostResponse,
			LoginForAccessTokenV1SystemAuthLoginPostError
		>({
			...options,
			...urlSearchParamsBodySerializer,
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded'
			},
			url: '/v1/system/auth/login'
		});
	}

	/**
	 * Refresh Access Token
	 */
	public static refreshAccessTokenV1SystemAuthRefreshPost<ThrowOnError extends boolean = false>(
		options?: Options<unknown, ThrowOnError>
	) {
		return (options?.client ?? client).post<
			ThrowOnError,
			RefreshAccessTokenV1SystemAuthRefreshPostResponse,
			RefreshAccessTokenV1SystemAuthRefreshPostError
		>({
			...options,
			url: '/v1/system/auth/refresh'
		});
	}

	/**
	 * Logout
	 */
	public static logoutV1SystemAuthLogoutPost<ThrowOnError extends boolean = false>(
		options?: Options<unknown, ThrowOnError>
	) {
		return (options?.client ?? client).post<
			ThrowOnError,
			LogoutV1SystemAuthLogoutPostResponse,
			LogoutV1SystemAuthLogoutPostError
		>({
			...options,
			url: '/v1/system/auth/logout'
		});
	}
}

export class ArtistsService {
	/**
	 * Endpoint
	 * Create a new Artist row in the database.
	 */
	public static endpointV1ArtistsCreatePost<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1ArtistsCreatePostData, ThrowOnError>
	) {
		return (options?.client ?? client).post<
			ThrowOnError,
			EndpointV1ArtistsCreatePostResponse,
			EndpointV1ArtistsCreatePostError
		>({
			...options,
			url: '/v1/artists/create'
		});
	}

	/**
	 * Endpoint
	 * Read a single Artist row from the database by its primary keys: ['id'].
	 */
	public static endpointV1ArtistsGetIdGet<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1ArtistsGetIdGetData, ThrowOnError>
	) {
		return (options?.client ?? client).get<
			ThrowOnError,
			EndpointV1ArtistsGetIdGetResponse,
			EndpointV1ArtistsGetIdGetError
		>({
			...options,
			url: '/v1/artists/get/{id}'
		});
	}

	/**
	 * Endpoint
	 * Read multiple Artist rows from the database with pagination.
	 */
	public static endpointV1ArtistsGetPaginatedGet<ThrowOnError extends boolean = false>(
		options?: Options<EndpointV1ArtistsGetPaginatedGetData, ThrowOnError>
	) {
		return (options?.client ?? client).get<
			ThrowOnError,
			EndpointV1ArtistsGetPaginatedGetResponse,
			EndpointV1ArtistsGetPaginatedGetError
		>({
			...options,
			url: '/v1/artists/get_paginated'
		});
	}

	/**
	 * Endpoint
	 * Update an existing Artist row in the database by its primary keys: ['id'].
	 */
	public static endpointV1ArtistsUpdateIdPatch<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1ArtistsUpdateIdPatchData, ThrowOnError>
	) {
		return (options?.client ?? client).patch<
			ThrowOnError,
			EndpointV1ArtistsUpdateIdPatchResponse,
			EndpointV1ArtistsUpdateIdPatchError
		>({
			...options,
			url: '/v1/artists/update/{id}'
		});
	}

	/**
	 * Endpoint
	 * Delete a Artist row from the database by its primary keys: ['id'].
	 */
	public static endpointV1ArtistsDeleteIdDelete<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1ArtistsDeleteIdDeleteData, ThrowOnError>
	) {
		return (options?.client ?? client).delete<
			ThrowOnError,
			EndpointV1ArtistsDeleteIdDeleteResponse,
			EndpointV1ArtistsDeleteIdDeleteError
		>({
			...options,
			url: '/v1/artists/delete/{id}'
		});
	}
}

export class TracksService {
	/**
	 * Endpoint
	 * Create a new Track row in the database.
	 */
	public static endpointV1TracksCreatePost<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1TracksCreatePostData, ThrowOnError>
	) {
		return (options?.client ?? client).post<
			ThrowOnError,
			EndpointV1TracksCreatePostResponse,
			EndpointV1TracksCreatePostError
		>({
			...options,
			url: '/v1/tracks/create'
		});
	}

	/**
	 * Endpoint
	 * Read a single Track row from the database by its primary keys: ['id'].
	 */
	public static endpointV1TracksGetIdGet<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1TracksGetIdGetData, ThrowOnError>
	) {
		return (options?.client ?? client).get<
			ThrowOnError,
			EndpointV1TracksGetIdGetResponse,
			EndpointV1TracksGetIdGetError
		>({
			...options,
			url: '/v1/tracks/get/{id}'
		});
	}

	/**
	 * Endpoint
	 * Read multiple Track rows from the database with pagination.
	 */
	public static endpointV1TracksGetPaginatedGet<ThrowOnError extends boolean = false>(
		options?: Options<EndpointV1TracksGetPaginatedGetData, ThrowOnError>
	) {
		return (options?.client ?? client).get<
			ThrowOnError,
			EndpointV1TracksGetPaginatedGetResponse,
			EndpointV1TracksGetPaginatedGetError
		>({
			...options,
			url: '/v1/tracks/get_paginated'
		});
	}

	/**
	 * Endpoint
	 * Update an existing Track row in the database by its primary keys: ['id'].
	 */
	public static endpointV1TracksUpdateIdPatch<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1TracksUpdateIdPatchData, ThrowOnError>
	) {
		return (options?.client ?? client).patch<
			ThrowOnError,
			EndpointV1TracksUpdateIdPatchResponse,
			EndpointV1TracksUpdateIdPatchError
		>({
			...options,
			url: '/v1/tracks/update/{id}'
		});
	}

	/**
	 * Endpoint
	 * Delete a Track row from the database by its primary keys: ['id'].
	 */
	public static endpointV1TracksDeleteIdDelete<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1TracksDeleteIdDeleteData, ThrowOnError>
	) {
		return (options?.client ?? client).delete<
			ThrowOnError,
			EndpointV1TracksDeleteIdDeleteResponse,
			EndpointV1TracksDeleteIdDeleteError
		>({
			...options,
			url: '/v1/tracks/delete/{id}'
		});
	}
}

export class GenresService {
	/**
	 * Endpoint
	 * Create a new Genre row in the database.
	 */
	public static endpointV1GenresCreatePost<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1GenresCreatePostData, ThrowOnError>
	) {
		return (options?.client ?? client).post<
			ThrowOnError,
			EndpointV1GenresCreatePostResponse,
			EndpointV1GenresCreatePostError
		>({
			...options,
			url: '/v1/genres/create'
		});
	}

	/**
	 * Endpoint
	 * Read a single Genre row from the database by its primary keys: ['id'].
	 */
	public static endpointV1GenresGetIdGet<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1GenresGetIdGetData, ThrowOnError>
	) {
		return (options?.client ?? client).get<
			ThrowOnError,
			EndpointV1GenresGetIdGetResponse,
			EndpointV1GenresGetIdGetError
		>({
			...options,
			url: '/v1/genres/get/{id}'
		});
	}

	/**
	 * Endpoint
	 * Read multiple Genre rows from the database with pagination.
	 */
	public static endpointV1GenresGetPaginatedGet<ThrowOnError extends boolean = false>(
		options?: Options<EndpointV1GenresGetPaginatedGetData, ThrowOnError>
	) {
		return (options?.client ?? client).get<
			ThrowOnError,
			EndpointV1GenresGetPaginatedGetResponse,
			EndpointV1GenresGetPaginatedGetError
		>({
			...options,
			url: '/v1/genres/get_paginated'
		});
	}

	/**
	 * Endpoint
	 * Update an existing Genre row in the database by its primary keys: ['id'].
	 */
	public static endpointV1GenresUpdateIdPatch<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1GenresUpdateIdPatchData, ThrowOnError>
	) {
		return (options?.client ?? client).patch<
			ThrowOnError,
			EndpointV1GenresUpdateIdPatchResponse,
			EndpointV1GenresUpdateIdPatchError
		>({
			...options,
			url: '/v1/genres/update/{id}'
		});
	}

	/**
	 * Endpoint
	 * Delete a Genre row from the database by its primary keys: ['id'].
	 */
	public static endpointV1GenresDeleteIdDelete<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1GenresDeleteIdDeleteData, ThrowOnError>
	) {
		return (options?.client ?? client).delete<
			ThrowOnError,
			EndpointV1GenresDeleteIdDeleteResponse,
			EndpointV1GenresDeleteIdDeleteError
		>({
			...options,
			url: '/v1/genres/delete/{id}'
		});
	}
}

export class SubgenresService {
	/**
	 * Endpoint
	 * Create a new Subgenre row in the database.
	 */
	public static endpointV1SubgenresCreatePost<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1SubgenresCreatePostData, ThrowOnError>
	) {
		return (options?.client ?? client).post<
			ThrowOnError,
			EndpointV1SubgenresCreatePostResponse,
			EndpointV1SubgenresCreatePostError
		>({
			...options,
			url: '/v1/subgenres/create'
		});
	}

	/**
	 * Endpoint
	 * Read a single Subgenre row from the database by its primary keys: ['id'].
	 */
	public static endpointV1SubgenresGetIdGet<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1SubgenresGetIdGetData, ThrowOnError>
	) {
		return (options?.client ?? client).get<
			ThrowOnError,
			EndpointV1SubgenresGetIdGetResponse,
			EndpointV1SubgenresGetIdGetError
		>({
			...options,
			url: '/v1/subgenres/get/{id}'
		});
	}

	/**
	 * Endpoint
	 * Read multiple Subgenre rows from the database with pagination.
	 */
	public static endpointV1SubgenresGetPaginatedGet<ThrowOnError extends boolean = false>(
		options?: Options<EndpointV1SubgenresGetPaginatedGetData, ThrowOnError>
	) {
		return (options?.client ?? client).get<
			ThrowOnError,
			EndpointV1SubgenresGetPaginatedGetResponse,
			EndpointV1SubgenresGetPaginatedGetError
		>({
			...options,
			url: '/v1/subgenres/get_paginated'
		});
	}

	/**
	 * Endpoint
	 * Update an existing Subgenre row in the database by its primary keys: ['id'].
	 */
	public static endpointV1SubgenresUpdateIdPatch<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1SubgenresUpdateIdPatchData, ThrowOnError>
	) {
		return (options?.client ?? client).patch<
			ThrowOnError,
			EndpointV1SubgenresUpdateIdPatchResponse,
			EndpointV1SubgenresUpdateIdPatchError
		>({
			...options,
			url: '/v1/subgenres/update/{id}'
		});
	}

	/**
	 * Endpoint
	 * Delete a Subgenre row from the database by its primary keys: ['id'].
	 */
	public static endpointV1SubgenresDeleteIdDelete<ThrowOnError extends boolean = false>(
		options: Options<EndpointV1SubgenresDeleteIdDeleteData, ThrowOnError>
	) {
		return (options?.client ?? client).delete<
			ThrowOnError,
			EndpointV1SubgenresDeleteIdDeleteResponse,
			EndpointV1SubgenresDeleteIdDeleteError
		>({
			...options,
			url: '/v1/subgenres/delete/{id}'
		});
	}
}
