// This file is auto-generated by @hey-api/openapi-ts

/**
 * Internal model for creating a new Artist.
 *
 * Inherits from ArtistCreate and ArtistOrgBase.
 * Used internally for creating a new artist with user-related information.
 */
export type ArtistCreateInternal = {
	/**
	 * Organization ID associated with the artist
	 */
	org_id: string;
	/**
	 * URL of the media associated with the post
	 */
	media_url?: string | null;
	email: string;
	/**
	 * Artist Biography
	 */
	biography: string;
	/**
	 * Artist Apple URL
	 */
	apple_artist_link?: string;
	/**
	 * Artist Beatport URL
	 */
	beatport_artist_link?: string;
	/**
	 * Artist Deezer URL
	 */
	deezer_artist_link?: string;
	/**
	 * Artist Tidal URL
	 */
	tidal_artist_link?: string;
	/**
	 * Artist Pandora URL
	 */
	pandora_artist_link?: string;
	/**
	 * Artist Shazam URL
	 */
	shazam_artist_link?: string;
	/**
	 * Artist Spotify URI
	 */
	spotify_artist_link?: string;
	/**
	 * Artist YouTube URL
	 */
	youtube_channel_link?: string;
	/**
	 * Artist Instagram URL
	 */
	instagram_profile_link?: string;
	/**
	 * Artist Facebook URL
	 */
	facebook_profile_link?: string;
	/**
	 * Artist X URL
	 */
	x_profile_link?: string;
	/**
	 * Artist TikTok URL
	 */
	tiktok_profile_link?: string;
	/**
	 * Artist SoundCloud URL
	 */
	soundcloud_profile_link?: string;
	/**
	 * Artist SongKick URL
	 */
	songkick_profile_link?: string;
	/**
	 * Artist BandsInTown URL
	 */
	bandsintown_profile_link?: string;
};

/**
 * Internal model for updating an existing Artist.
 *
 * Inherits from ArtistUpdate.
 * Used internally for updating an artist with additional metadata.
 *
 * Attributes:
 * updated_at (datetime): The timestamp of the last update.
 */
export type ArtistUpdateInternal = {
	/**
	 * URL of the media associated with the post
	 */
	media_url?: string | null;
	email?: string | null;
	/**
	 * Artist Biography
	 */
	biography?: string | null;
	/**
	 * Artist Apple URL
	 */
	apple_artist_link?: string | null;
	/**
	 * Artist Beatport URL
	 */
	beatport_artist_link?: string | null;
	/**
	 * Artist Deezer URL
	 */
	deezer_artist_link?: string | null;
	/**
	 * Artist Tidal URL
	 */
	tidal_artist_link?: string | null;
	/**
	 * Artist Pandora URL
	 */
	pandora_artist_link?: string | null;
	/**
	 * Artist Shazam URL
	 */
	shazam_artist_link?: string | null;
	/**
	 * Artist Spotify URI
	 */
	spotify_artist_link?: string | null;
	/**
	 * Artist YouTube URL
	 */
	youtube_channel_link?: string | null;
	/**
	 * Artist Instagram URL
	 */
	instagram_profile_link?: string | null;
	/**
	 * Artist Facebook URL
	 */
	facebook_profile_link?: string | null;
	/**
	 * Artist X URL
	 */
	x_profile_link?: string | null;
	/**
	 * Artist TikTok URL
	 */
	tiktok_profile_link?: string | null;
	/**
	 * Artist SoundCloud URL
	 */
	soundcloud_profile_link?: string | null;
	/**
	 * Artist SongKick URL
	 */
	songkick_profile_link?: string | null;
	/**
	 * Artist BandsInTown URL
	 */
	bandsintown_profile_link?: string | null;
	updated_at: Date;
};

export type Body_login_for_access_token_v1_system_auth_login_post = {
	grant_type: string;
	username: string;
	password: string;
	scope?: string;
	client_id?: string | null;
	client_secret?: string | null;
};

export type GenreCreateInternal = {
	/**
	 * Genre Name
	 */
	genre_name: string;
};

export type GenreUpdateInternal = {
	/**
	 * Genre Name
	 */
	genre_name?: string | null;
	updated_at: Date;
};

export type HTTPValidationError = {
	detail?: Array<ValidationError>;
};

export type SubgenreCreateInternal = {
	/**
	 * Subgenre Name
	 */
	subgenre_name: string;
};

export type SubgenreUpdateInternal = {
	/**
	 * Subgenre Name
	 */
	subgenre_name?: string | null;
	updated_at: Date;
};

export type Token = {
	access_token: string;
	token_type: string;
};

export type TrackCreateInternal = {
	/**
	 * User ID associated with the track
	 */
	user_id: string;
	/**
	 * URL of the media associated with the post
	 */
	media_url?: string | null;
	/**
	 * Track ISRC
	 */
	isrc: string;
	/**
	 * Track ISWC
	 */
	iswc: string;
	/**
	 * Track Name
	 */
	track_name: string;
	/**
	 * Track Version
	 */
	track_version: string;
	/**
	 * Track Birthdate
	 */
	birthdate: Date;
	/**
	 * Track Phone Number
	 */
	phone: string;
	/**
	 * Track Birth Location
	 */
	birth_location: string;
	/**
	 * Track Current Location
	 */
	current_location: string;
	/**
	 * Track Biography
	 */
	track_biography: string;
	/**
	 * Track Website
	 */
	track_website: string;
	/**
	 * Track Spotify URI
	 */
	spotify_uri: string;
	/**
	 * Track Apple Music URI
	 */
	apple_music_uri: string;
	/**
	 * Track YouTube URL
	 */
	youtube_url: string;
	/**
	 * Primary Genre ID
	 */
	primary_genre_id: string;
	/**
	 * Primary Subgenre ID
	 */
	primary_subgenre_id: string;
};

export type TrackUpdateInternal = {
	/**
	 * URL of the media associated with the post
	 */
	media_url?: string | null;
	/**
	 * Track ISRC
	 */
	isrc?: string | null;
	/**
	 * Track ISWC
	 */
	iswc?: string | null;
	/**
	 * Track Name
	 */
	track_name?: string | null;
	/**
	 * Track Version
	 */
	track_version?: string | null;
	/**
	 * Track Birthdate
	 */
	birthdate?: Date | null;
	/**
	 * Track Phone Number
	 */
	phone?: string | null;
	/**
	 * Track Birth Location
	 */
	birth_location?: string | null;
	/**
	 * Track Current Location
	 */
	current_location?: string | null;
	/**
	 * Track Biography
	 */
	track_biography?: string | null;
	/**
	 * Track Website
	 */
	track_website?: string | null;
	/**
	 * Track Spotify URI
	 */
	spotify_uri?: string | null;
	/**
	 * Track Apple Music URI
	 */
	apple_music_uri?: string | null;
	/**
	 * Track YouTube URL
	 */
	youtube_url?: string | null;
	/**
	 * Primary Genre ID
	 */
	primary_genre_id?: string | null;
	/**
	 * Primary Subgenre ID
	 */
	primary_subgenre_id?: string | null;
	updated_at: Date;
};

export type ValidationError = {
	loc: Array<string | number>;
	msg: string;
	type: string;
};

export type LoginForAccessTokenV1SystemAuthLoginPostData = {
	body: Body_login_for_access_token_v1_system_auth_login_post;
};

export type LoginForAccessTokenV1SystemAuthLoginPostResponse = Token;

export type LoginForAccessTokenV1SystemAuthLoginPostError = HTTPValidationError;

export type RefreshAccessTokenV1SystemAuthRefreshPostResponse = {
	[key: string]: string;
};

export type RefreshAccessTokenV1SystemAuthRefreshPostError = unknown;

export type LogoutV1SystemAuthLogoutPostResponse = {
	[key: string]: string;
};

export type LogoutV1SystemAuthLogoutPostError = unknown;

export type EndpointV1ArtistsCreatePostData = {
	body: ArtistCreateInternal;
};

export type EndpointV1ArtistsCreatePostResponse = unknown;

export type EndpointV1ArtistsCreatePostError = HTTPValidationError;

export type EndpointV1ArtistsGetIdGetData = {
	path: {
		id: string;
	};
};

export type EndpointV1ArtistsGetIdGetResponse = unknown;

export type EndpointV1ArtistsGetIdGetError = HTTPValidationError;

export type EndpointV1ArtistsGetPaginatedGetData = {
	query?: {
		/**
		 * Number of items per page
		 */
		itemsPerPage?: number;
		/**
		 * Page number, starting from 1
		 */
		page?: number;
	};
};

export type EndpointV1ArtistsGetPaginatedGetResponse = unknown;

export type EndpointV1ArtistsGetPaginatedGetError = HTTPValidationError;

export type EndpointV1ArtistsUpdateIdPatchData = {
	body: ArtistUpdateInternal;
	path: {
		id: string;
	};
};

export type EndpointV1ArtistsUpdateIdPatchResponse = unknown;

export type EndpointV1ArtistsUpdateIdPatchError = HTTPValidationError;

export type EndpointV1ArtistsDeleteIdDeleteData = {
	path: {
		id: string;
	};
};

export type EndpointV1ArtistsDeleteIdDeleteResponse = unknown;

export type EndpointV1ArtistsDeleteIdDeleteError = HTTPValidationError;

export type EndpointV1TracksCreatePostData = {
	body: TrackCreateInternal;
};

export type EndpointV1TracksCreatePostResponse = unknown;

export type EndpointV1TracksCreatePostError = HTTPValidationError;

export type EndpointV1TracksGetIdGetData = {
	path: {
		id: string;
	};
};

export type EndpointV1TracksGetIdGetResponse = unknown;

export type EndpointV1TracksGetIdGetError = HTTPValidationError;

export type EndpointV1TracksGetPaginatedGetData = {
	query?: {
		/**
		 * Number of items per page
		 */
		itemsPerPage?: number;
		/**
		 * Page number, starting from 1
		 */
		page?: number;
	};
};

export type EndpointV1TracksGetPaginatedGetResponse = unknown;

export type EndpointV1TracksGetPaginatedGetError = HTTPValidationError;

export type EndpointV1TracksUpdateIdPatchData = {
	body: TrackUpdateInternal;
	path: {
		id: string;
	};
};

export type EndpointV1TracksUpdateIdPatchResponse = unknown;

export type EndpointV1TracksUpdateIdPatchError = HTTPValidationError;

export type EndpointV1TracksDeleteIdDeleteData = {
	path: {
		id: string;
	};
};

export type EndpointV1TracksDeleteIdDeleteResponse = unknown;

export type EndpointV1TracksDeleteIdDeleteError = HTTPValidationError;

export type EndpointV1GenresCreatePostData = {
	body: GenreCreateInternal;
};

export type EndpointV1GenresCreatePostResponse = unknown;

export type EndpointV1GenresCreatePostError = HTTPValidationError;

export type EndpointV1GenresGetIdGetData = {
	path: {
		id: string;
	};
};

export type EndpointV1GenresGetIdGetResponse = unknown;

export type EndpointV1GenresGetIdGetError = HTTPValidationError;

export type EndpointV1GenresGetPaginatedGetData = {
	query?: {
		/**
		 * Number of items per page
		 */
		itemsPerPage?: number;
		/**
		 * Page number, starting from 1
		 */
		page?: number;
	};
};

export type EndpointV1GenresGetPaginatedGetResponse = unknown;

export type EndpointV1GenresGetPaginatedGetError = HTTPValidationError;

export type EndpointV1GenresUpdateIdPatchData = {
	body: GenreUpdateInternal;
	path: {
		id: string;
	};
};

export type EndpointV1GenresUpdateIdPatchResponse = unknown;

export type EndpointV1GenresUpdateIdPatchError = HTTPValidationError;

export type EndpointV1GenresDeleteIdDeleteData = {
	path: {
		id: string;
	};
};

export type EndpointV1GenresDeleteIdDeleteResponse = unknown;

export type EndpointV1GenresDeleteIdDeleteError = HTTPValidationError;

export type EndpointV1SubgenresCreatePostData = {
	body: SubgenreCreateInternal;
};

export type EndpointV1SubgenresCreatePostResponse = unknown;

export type EndpointV1SubgenresCreatePostError = HTTPValidationError;

export type EndpointV1SubgenresGetIdGetData = {
	path: {
		id: string;
	};
};

export type EndpointV1SubgenresGetIdGetResponse = unknown;

export type EndpointV1SubgenresGetIdGetError = HTTPValidationError;

export type EndpointV1SubgenresGetPaginatedGetData = {
	query?: {
		/**
		 * Number of items per page
		 */
		itemsPerPage?: number;
		/**
		 * Page number, starting from 1
		 */
		page?: number;
	};
};

export type EndpointV1SubgenresGetPaginatedGetResponse = unknown;

export type EndpointV1SubgenresGetPaginatedGetError = HTTPValidationError;

export type EndpointV1SubgenresUpdateIdPatchData = {
	body: SubgenreUpdateInternal;
	path: {
		id: string;
	};
};

export type EndpointV1SubgenresUpdateIdPatchResponse = unknown;

export type EndpointV1SubgenresUpdateIdPatchError = HTTPValidationError;

export type EndpointV1SubgenresDeleteIdDeleteData = {
	path: {
		id: string;
	};
};

export type EndpointV1SubgenresDeleteIdDeleteResponse = unknown;

export type EndpointV1SubgenresDeleteIdDeleteError = HTTPValidationError;

export type $OpenApiTs = {
	'/v1/system/auth/login': {
		post: {
			req: LoginForAccessTokenV1SystemAuthLoginPostData;
			res: {
				/**
				 * Successful Response
				 */
				'200': Token;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/system/auth/refresh': {
		post: {
			res: {
				/**
				 * Successful Response
				 */
				'200': {
					[key: string]: string;
				};
			};
		};
	};
	'/v1/system/auth/logout': {
		post: {
			res: {
				/**
				 * Successful Response
				 */
				'200': {
					[key: string]: string;
				};
			};
		};
	};
	'/v1/artists/create': {
		post: {
			req: EndpointV1ArtistsCreatePostData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/artists/get/{id}': {
		get: {
			req: EndpointV1ArtistsGetIdGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/artists/get_paginated': {
		get: {
			req: EndpointV1ArtistsGetPaginatedGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/artists/update/{id}': {
		patch: {
			req: EndpointV1ArtistsUpdateIdPatchData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/artists/delete/{id}': {
		delete: {
			req: EndpointV1ArtistsDeleteIdDeleteData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/tracks/create': {
		post: {
			req: EndpointV1TracksCreatePostData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/tracks/get/{id}': {
		get: {
			req: EndpointV1TracksGetIdGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/tracks/get_paginated': {
		get: {
			req: EndpointV1TracksGetPaginatedGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/tracks/update/{id}': {
		patch: {
			req: EndpointV1TracksUpdateIdPatchData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/tracks/delete/{id}': {
		delete: {
			req: EndpointV1TracksDeleteIdDeleteData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/genres/create': {
		post: {
			req: EndpointV1GenresCreatePostData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/genres/get/{id}': {
		get: {
			req: EndpointV1GenresGetIdGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/genres/get_paginated': {
		get: {
			req: EndpointV1GenresGetPaginatedGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/genres/update/{id}': {
		patch: {
			req: EndpointV1GenresUpdateIdPatchData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/genres/delete/{id}': {
		delete: {
			req: EndpointV1GenresDeleteIdDeleteData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/subgenres/create': {
		post: {
			req: EndpointV1SubgenresCreatePostData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/subgenres/get/{id}': {
		get: {
			req: EndpointV1SubgenresGetIdGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/subgenres/get_paginated': {
		get: {
			req: EndpointV1SubgenresGetPaginatedGetData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/subgenres/update/{id}': {
		patch: {
			req: EndpointV1SubgenresUpdateIdPatchData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
	'/v1/subgenres/delete/{id}': {
		delete: {
			req: EndpointV1SubgenresDeleteIdDeleteData;
			res: {
				/**
				 * Successful Response
				 */
				'200': unknown;
				/**
				 * Validation Error
				 */
				'422': HTTPValidationError;
			};
		};
	};
};
